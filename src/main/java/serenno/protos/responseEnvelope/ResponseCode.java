// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResponseEnvelope.proto

package serenno.protos.responseEnvelope;

/**
 * Protobuf enum {@code serenno.protos.responseEnvelope.ResponseCode}
 */
public enum ResponseCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>NONE = 0;</code>
   */
  NONE(0),
  /**
   * <code>OK = 1;</code>
   */
  OK(1),
  /**
   * <code>ERROR = 2;</code>
   */
  ERROR(2),
  /**
   * <code>SERVERERROR = 3;</code>
   */
  SERVERERROR(3),
  /**
   * <code>SESSIONEXPIRED = 4;</code>
   */
  SESSIONEXPIRED(4),
  /**
   * <code>AUTHFAILED = 5;</code>
   */
  AUTHFAILED(5),
  /**
   * <code>RATEEXCEEDED = 6;</code>
   */
  RATEEXCEEDED(6),
  /**
   * <code>SERVERUNAVAILABLE = 7;</code>
   */
  SERVERUNAVAILABLE(7),
  /**
   * <code>INVALIDREQUEST = 8;</code>
   */
  INVALIDREQUEST(8),
  /**
   * <code>INVALIDDATA = 9;</code>
   */
  INVALIDDATA(9),
  /**
   * <code>LEADERBOARDMATCHMAKINGERROR = 10;</code>
   */
  LEADERBOARDMATCHMAKINGERROR(10),
  /**
   * <code>UNAUTHORIZED = 11;</code>
   */
  UNAUTHORIZED(11),
  /**
   * <code>SUSPENDED = 12;</code>
   */
  SUSPENDED(12),
  /**
   * <code>SERVEROUTAGE = 13;</code>
   */
  SERVEROUTAGE(13),
  /**
   * <code>NETWORKUNAVAILABLE = 20;</code>
   */
  NETWORKUNAVAILABLE(20),
  /**
   * <code>SEQUENCEHIGH = 30;</code>
   */
  SEQUENCEHIGH(30),
  /**
   * <code>SEQUENCELOW = 31;</code>
   */
  SEQUENCELOW(31),
  /**
   * <code>RECORDNOTFOUND = 32;</code>
   */
  RECORDNOTFOUND(32),
  /**
   * <code>EVENTNOTFOUND = 33;</code>
   */
  EVENTNOTFOUND(33),
  /**
   * <code>INSUFFICIENTRESOURCES = 40;</code>
   */
  INSUFFICIENTRESOURCES(40),
  /**
   * <code>INVALIDCLIENTVERSION = 50;</code>
   */
  INVALIDCLIENTVERSION(50),
  /**
   * <code>FORCECLIENTRESTART = 51;</code>
   */
  FORCECLIENTRESTART(51),
  /**
   * <code>INCOMPATIBLEDEVICE = 52;</code>
   */
  INCOMPATIBLEDEVICE(52),
  /**
   * <code>ACCOUNTUPDATED = 53;</code>
   */
  ACCOUNTUPDATED(53),
  /**
   * <code>INVALIDRECEIPT = 60;</code>
   */
  INVALIDRECEIPT(60),
  /**
   * <code>PAYMENTPENDING = 61;</code>
   */
  PAYMENTPENDING(61),
  /**
   * <code>OPPONENTINBATTLE = 71;</code>
   */
  OPPONENTINBATTLE(71),
  /**
   * <code>UNDERATTACK = 72;</code>
   */
  UNDERATTACK(72),
  /**
   * <code>OPPONENTDATASTALE = 73;</code>
   */
  OPPONENTDATASTALE(73),
  /**
   * <code>BATTLETIMEDOUT = 74;</code>
   */
  BATTLETIMEDOUT(74),
  /**
   * <code>PLAYERRANKSTALE = 75;</code>
   */
  PLAYERRANKSTALE(75),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>NONE = 0;</code>
   */
  public static final int NONE_VALUE = 0;
  /**
   * <code>OK = 1;</code>
   */
  public static final int OK_VALUE = 1;
  /**
   * <code>ERROR = 2;</code>
   */
  public static final int ERROR_VALUE = 2;
  /**
   * <code>SERVERERROR = 3;</code>
   */
  public static final int SERVERERROR_VALUE = 3;
  /**
   * <code>SESSIONEXPIRED = 4;</code>
   */
  public static final int SESSIONEXPIRED_VALUE = 4;
  /**
   * <code>AUTHFAILED = 5;</code>
   */
  public static final int AUTHFAILED_VALUE = 5;
  /**
   * <code>RATEEXCEEDED = 6;</code>
   */
  public static final int RATEEXCEEDED_VALUE = 6;
  /**
   * <code>SERVERUNAVAILABLE = 7;</code>
   */
  public static final int SERVERUNAVAILABLE_VALUE = 7;
  /**
   * <code>INVALIDREQUEST = 8;</code>
   */
  public static final int INVALIDREQUEST_VALUE = 8;
  /**
   * <code>INVALIDDATA = 9;</code>
   */
  public static final int INVALIDDATA_VALUE = 9;
  /**
   * <code>LEADERBOARDMATCHMAKINGERROR = 10;</code>
   */
  public static final int LEADERBOARDMATCHMAKINGERROR_VALUE = 10;
  /**
   * <code>UNAUTHORIZED = 11;</code>
   */
  public static final int UNAUTHORIZED_VALUE = 11;
  /**
   * <code>SUSPENDED = 12;</code>
   */
  public static final int SUSPENDED_VALUE = 12;
  /**
   * <code>SERVEROUTAGE = 13;</code>
   */
  public static final int SERVEROUTAGE_VALUE = 13;
  /**
   * <code>NETWORKUNAVAILABLE = 20;</code>
   */
  public static final int NETWORKUNAVAILABLE_VALUE = 20;
  /**
   * <code>SEQUENCEHIGH = 30;</code>
   */
  public static final int SEQUENCEHIGH_VALUE = 30;
  /**
   * <code>SEQUENCELOW = 31;</code>
   */
  public static final int SEQUENCELOW_VALUE = 31;
  /**
   * <code>RECORDNOTFOUND = 32;</code>
   */
  public static final int RECORDNOTFOUND_VALUE = 32;
  /**
   * <code>EVENTNOTFOUND = 33;</code>
   */
  public static final int EVENTNOTFOUND_VALUE = 33;
  /**
   * <code>INSUFFICIENTRESOURCES = 40;</code>
   */
  public static final int INSUFFICIENTRESOURCES_VALUE = 40;
  /**
   * <code>INVALIDCLIENTVERSION = 50;</code>
   */
  public static final int INVALIDCLIENTVERSION_VALUE = 50;
  /**
   * <code>FORCECLIENTRESTART = 51;</code>
   */
  public static final int FORCECLIENTRESTART_VALUE = 51;
  /**
   * <code>INCOMPATIBLEDEVICE = 52;</code>
   */
  public static final int INCOMPATIBLEDEVICE_VALUE = 52;
  /**
   * <code>ACCOUNTUPDATED = 53;</code>
   */
  public static final int ACCOUNTUPDATED_VALUE = 53;
  /**
   * <code>INVALIDRECEIPT = 60;</code>
   */
  public static final int INVALIDRECEIPT_VALUE = 60;
  /**
   * <code>PAYMENTPENDING = 61;</code>
   */
  public static final int PAYMENTPENDING_VALUE = 61;
  /**
   * <code>OPPONENTINBATTLE = 71;</code>
   */
  public static final int OPPONENTINBATTLE_VALUE = 71;
  /**
   * <code>UNDERATTACK = 72;</code>
   */
  public static final int UNDERATTACK_VALUE = 72;
  /**
   * <code>OPPONENTDATASTALE = 73;</code>
   */
  public static final int OPPONENTDATASTALE_VALUE = 73;
  /**
   * <code>BATTLETIMEDOUT = 74;</code>
   */
  public static final int BATTLETIMEDOUT_VALUE = 74;
  /**
   * <code>PLAYERRANKSTALE = 75;</code>
   */
  public static final int PLAYERRANKSTALE_VALUE = 75;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static ResponseCode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ResponseCode forNumber(int value) {
    switch (value) {
      case 0: return NONE;
      case 1: return OK;
      case 2: return ERROR;
      case 3: return SERVERERROR;
      case 4: return SESSIONEXPIRED;
      case 5: return AUTHFAILED;
      case 6: return RATEEXCEEDED;
      case 7: return SERVERUNAVAILABLE;
      case 8: return INVALIDREQUEST;
      case 9: return INVALIDDATA;
      case 10: return LEADERBOARDMATCHMAKINGERROR;
      case 11: return UNAUTHORIZED;
      case 12: return SUSPENDED;
      case 13: return SERVEROUTAGE;
      case 20: return NETWORKUNAVAILABLE;
      case 30: return SEQUENCEHIGH;
      case 31: return SEQUENCELOW;
      case 32: return RECORDNOTFOUND;
      case 33: return EVENTNOTFOUND;
      case 40: return INSUFFICIENTRESOURCES;
      case 50: return INVALIDCLIENTVERSION;
      case 51: return FORCECLIENTRESTART;
      case 52: return INCOMPATIBLEDEVICE;
      case 53: return ACCOUNTUPDATED;
      case 60: return INVALIDRECEIPT;
      case 61: return PAYMENTPENDING;
      case 71: return OPPONENTINBATTLE;
      case 72: return UNDERATTACK;
      case 73: return OPPONENTDATASTALE;
      case 74: return BATTLETIMEDOUT;
      case 75: return PLAYERRANKSTALE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ResponseCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ResponseCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ResponseCode>() {
          public ResponseCode findValueByNumber(int number) {
            return ResponseCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return ResponseEnvelopeOuterClass.getDescriptor().getEnumTypes().get(1);
  }

  private static final ResponseCode[] VALUES = values();

  public static ResponseCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ResponseCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:serenno.protos.responseEnvelope.ResponseCode)
}

